// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserAccountType {
  INDIVIDUAL
  BUSINESS
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  role          String    @default("USER") // USER, ADMIN
  accountType   UserAccountType @default(INDIVIDUAL)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts           Account[]
  sessions           Session[]
  carbonActivities   CarbonActivity[]
  goals             Goal[]
  userSettings      UserSettings?
  teamMemberships   TeamMember[]
  achievements      Achievement[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Carbon tracking models
model CarbonActivity {
  id          String   @id @default(cuid())
  userId      String
  type        String   // Cloud Computing, Data Transfer, etc.
  category    String   // AWS EC2, CDN, etc.
  amount      Float    // kg CO2
  description String
  location    String?
  metadata    String?  // JSON string for additional data
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carbon_activities")
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  target      Float    // Target value
  current     Float    @default(0) // Current progress
  unit        String   // kg CO2, %, etc.
  period      String   // daily, weekly, monthly, yearly
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  notifications         Boolean  @default(true)
  emailNotifications    Boolean  @default(true)
  theme                 String   @default("dark") // dark, light
  timezone             String   @default("UTC")
  carbonUnit           String   @default("kg") // kg, g, tons
  privacyLevel         String   @default("private") // private, public, team
  weeklyReports        Boolean  @default(true)
  monthlyReports       Boolean  @default(true)
  goalReminders        Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // e.g., 'FIRST_ACTIVITY', 'REDUCED_EMISSIONS_STREAK'
  name        String
  description String
  achievedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("achievements")
}

// Team/Organization models (for future use)
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String @id @default(cuid())
  userId   String
  teamId   String
  role     String @default("MEMBER") // ADMIN, MEMBER, VIEWER
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}
